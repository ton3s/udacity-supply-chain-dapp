// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function (accounts) {
	// Declare few constants and assign a few sample accounts generated by ganache-cli
	var sku = 1
	var upc = 1
	const ownerID = accounts[0]
	const originFarmerID = accounts[1]
	const originFarmName = 'John Doe'
	const originFarmInformation = 'Yarray Valley'
	const originFarmLatitude = '-38.239770'
	const originFarmLongitude = '144.341490'
	var productID = sku + upc
	const productNotes = 'Best beans for Espresso'
	const productPrice = web3.utils.toWei('0.01', 'ether')
	var itemState = 0
	const distributorID = accounts[2]
	const retailerID = accounts[3]
	const consumerID = accounts[4]
	const emptyAddress = '0x00000000000000000000000000000000000000'

	///Available Accounts
	///==================
	///(0) 0x85C2A38b0251fbe7E5bDBb43f34212c0E32e9D3B
	///(1) 0x54E7C25C23987e3a51d7e43aA1f477849b04c156
	///(2) 0xD9FE1E39E44c030F8F1f400a2Af84f06B378957D
	///(3) 0x1875B3035B1462D4b00269895A0Dc2D23B97E66B
	///(4) 0xedC019c520dC4e02b7FCB8b25249Aa6cdAd7994C

	console.log('ganache accounts used here...')
	console.log('Contract Owner: accounts[0] ', accounts[0])
	console.log('Farmer: accounts[1] ', accounts[1])
	console.log('Distributor: accounts[2] ', accounts[2])
	console.log('Retailer: accounts[3] ', accounts[3])
	console.log('Consumer: accounts[4] ', accounts[4])

	// 1st Test
	it('Testing smart contract function harvestItem() that allows a farmer to harvest coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Mark an item as Harvested by calling function harvestItem()
		const txReceipt = await supplyChain.harvestItem(
			upc,
			originFarmerID,
			originFarmName,
			originFarmInformation,
			originFarmLatitude,
			originFarmLongitude,
			productNotes
		)

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
		assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
		assert.equal(
			resultBufferOne[2],
			originFarmerID,
			'Error: Missing or Invalid ownerID'
		)
		assert.equal(
			resultBufferOne[3],
			originFarmerID,
			'Error: Missing or Invalid originFarmerID'
		)
		assert.equal(
			resultBufferOne[4],
			originFarmName,
			'Error: Missing or Invalid originFarmName'
		)
		assert.equal(
			resultBufferOne[5],
			originFarmInformation,
			'Error: Missing or Invalid originFarmInformation'
		)
		assert.equal(
			resultBufferOne[6],
			originFarmLatitude,
			'Error: Missing or Invalid originFarmLatitude'
		)
		assert.equal(
			resultBufferOne[7],
			originFarmLongitude,
			'Error: Missing or Invalid originFarmLongitude'
		)
		assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')

		// Watch the emitted event Harvested()
		truffleAssert.eventEmitted(txReceipt, 'Harvested')
	})

	// 2nd Test
	it('Testing smart contract function processItem() that allows a farmer to process coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Mark an item as Processed by calling function processtItem()
		const txReceipt = await supplyChain.processItem(upc, {
			from: originFarmerID,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')

		// Watch the emitted event Processed()
		truffleAssert.eventEmitted(txReceipt, 'Processed')
	})

	// 3rd Test
	it('Testing smart contract function packItem() that allows a farmer to pack coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Mark an item as Packed by calling function packItem()
		const txReceipt = await supplyChain.packItem(upc, {
			from: originFarmerID,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')

		// Watch the emitted event Packed()
		truffleAssert.eventEmitted(txReceipt, 'Packed')
	})

	// 4th Test
	it('Testing smart contract function sellItem() that allows a farmer to sell coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Mark an item as ForSale by calling function sellItem()
		const txReceipt = await supplyChain.sellItem(upc, productPrice, {
			from: originFarmerID,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(
			resultBufferTwo[4],
			productPrice,
			'Error: Missing or Invalid productPrice'
		)
		assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')

		// Watch the emitted event ForSale()
		truffleAssert.eventEmitted(txReceipt, 'ForSale')
	})

	// 5th Test
	it('Testing smart contract function buyItem() that allows a distributor to buy coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Add distributer
		await supplyChain.addDistributor(distributorID)

		// Balances of farmer before the transaction
		const origFarmerBalance = await web3.eth.getBalance(originFarmerID)

		// Mark an item as Sold by calling function buyItem()
		const txReceipt = await supplyChain.buyItem(upc, {
			from: distributorID,
			to: supplyChain.address,
			value: productPrice,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(
			resultBufferOne[2],
			distributorID,
			'Error: Missing or Invalid ownerId'
		)
		assert.equal(
			resultBufferTwo[6],
			distributorID,
			'Error: Missing or Invalid distributorId'
		)
		assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')

		// Farmer's balance has increased by productPrice
		const newFarmerBalance = await web3.eth.getBalance(originFarmerID)
		assert.equal(
			parseInt(origFarmerBalance) + parseInt(productPrice),
			newFarmerBalance,
			'Error: Farmer balance did not update correctly'
		)

		// Watch the emitted event Sold()
		truffleAssert.eventEmitted(txReceipt, 'Sold')
	})

	// 6th Test
	it('Testing smart contract function shipItem() that allows a distributor to ship coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Mark an item as Shipped by calling function shipItem()
		const txReceipt = await supplyChain.shipItem(upc, {
			from: distributorID,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')

		// Watch the emitted event Shipped()
		truffleAssert.eventEmitted(txReceipt, 'Shipped')
	})

	// 7th Test
	it('Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Add retailer
		await supplyChain.addRetailer(retailerID)

		// Mark an item as Received by calling function receiveItem()
		const txReceipt = await supplyChain.receiveItem(upc, {
			from: retailerID,
		})

		// Retrieve the just now saved item from blockchain by calling function fetchItem()
		const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
		const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

		// Verify the result set
		assert.equal(
			resultBufferOne[2],
			retailerID,
			'Error: Missing or Invalid ownerId'
		)
		assert.equal(
			resultBufferTwo[7],
			retailerID,
			'Error: Missing or Invalid retailerID'
		)
		assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')

		// Watch the emitted event Received()
		truffleAssert.eventEmitted(txReceipt, 'Received')
	})

	// 8th Test
	it('Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Declare and Initialize a variable for event

		// Watch the emitted event Purchased()

		// Mark an item as Sold by calling function buyItem()

		// Retrieve the just now saved item from blockchain by calling function fetchItem()

		// Verify the result set
	})

	// 9th Test
	it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Retrieve the just now saved item from blockchain by calling function fetchItem()

		// Verify the result set:
	})

	// 10th Test
	it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async () => {
		const supplyChain = await SupplyChain.deployed()

		// Retrieve the just now saved item from blockchain by calling function fetchItem()

		// Verify the result set:
	})
})
